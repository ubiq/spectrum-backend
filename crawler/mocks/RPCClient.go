// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/ubiq/spectrum-backend/models"

// RPCClient is an autogenerated mock type for the RPCClient type
type RPCClient struct {
	mock.Mock
}

// GetBlockByHash provides a mock function with given fields: hash
func (_m *RPCClient) GetBlockByHash(hash string) (*models.Block, error) {
	ret := _m.Called(hash)

	var r0 *models.Block
	if rf, ok := ret.Get(0).(func(string) *models.Block); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHeight provides a mock function with given fields: height
func (_m *RPCClient) GetBlockByHeight(height uint64) (*models.Block, error) {
	ret := _m.Called(height)

	var r0 *models.Block
	if rf, ok := ret.Get(0).(func(uint64) *models.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields:
func (_m *RPCClient) GetLatestBlock() (*models.Block, error) {
	ret := _m.Called()

	var r0 *models.Block
	if rf, ok := ret.Get(0).(func() *models.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxReceipt provides a mock function with given fields: hash
func (_m *RPCClient) GetTxReceipt(hash string) (*models.TxReceipt, error) {
	ret := _m.Called(hash)

	var r0 *models.TxReceipt
	if rf, ok := ret.Get(0).(func(string) *models.TxReceipt); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TxReceipt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUncleByBlockNumberAndIndex provides a mock function with given fields: height, index
func (_m *RPCClient) GetUncleByBlockNumberAndIndex(height uint64, index int) (*models.Uncle, error) {
	ret := _m.Called(height, index)

	var r0 *models.Uncle
	if rf, ok := ret.Get(0).(func(uint64, int) *models.Uncle); ok {
		r0 = rf(height, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Uncle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, int) error); ok {
		r1 = rf(height, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LatestBlockNumber provides a mock function with given fields:
func (_m *RPCClient) LatestBlockNumber() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *RPCClient) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
