// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mgo "github.com/globalsign/mgo"
import mock "github.com/stretchr/testify/mock"
import models "github.com/ubiq/spectrum-backend/models"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AddBlock provides a mock function with given fields: b
func (_m *Database) AddBlock(b *models.Block) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Block) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddForkedBlock provides a mock function with given fields: b
func (_m *Database) AddForkedBlock(b *models.Block) error {
	ret := _m.Called(b)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Block) error); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLineChart provides a mock function with given fields: t
func (_m *Database) AddLineChart(t *models.LineChart) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.LineChart) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddMLChart provides a mock function with given fields: t
func (_m *Database) AddMLChart(t *models.MLineChart) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.MLineChart) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTokenTransfer provides a mock function with given fields: tt
func (_m *Database) AddTokenTransfer(tt *models.TokenTransfer) error {
	ret := _m.Called(tt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TokenTransfer) error); ok {
		r0 = rf(tt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTransaction provides a mock function with given fields: tx
func (_m *Database) AddTransaction(tx *models.Transaction) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUncle provides a mock function with given fields: u
func (_m *Database) AddUncle(u *models.Uncle) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Uncle) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlocksIter provides a mock function with given fields: blockno
func (_m *Database) BlocksIter(blockno uint64) *mgo.Iter {
	ret := _m.Called(blockno)

	var r0 *mgo.Iter
	if rf, ok := ret.Get(0).(func(uint64) *mgo.Iter); ok {
		r0 = rf(blockno)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Iter)
		}
	}

	return r0
}

// GetBlock provides a mock function with given fields: height
func (_m *Database) GetBlock(height uint64) (*models.Block, error) {
	ret := _m.Called(height)

	var r0 *models.Block
	if rf, ok := ret.Get(0).(func(uint64) *models.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocks provides a mock function with given fields: days
func (_m *Database) GetBlocks(days int) *mgo.Iter {
	ret := _m.Called(days)

	var r0 *mgo.Iter
	if rf, ok := ret.Get(0).(func(int) *mgo.Iter); ok {
		r0 = rf(days)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Iter)
		}
	}

	return r0
}

// GetTokenTransfers provides a mock function with given fields: contractAddress, address, after
func (_m *Database) GetTokenTransfers(contractAddress string, address string, after int64) *mgo.Iter {
	ret := _m.Called(contractAddress, address, after)

	var r0 *mgo.Iter
	if rf, ok := ret.Get(0).(func(string, string, int64) *mgo.Iter); ok {
		r0 = rf(contractAddress, address, after)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Iter)
		}
	}

	return r0
}

// GetTxnCounts provides a mock function with given fields: days
func (_m *Database) GetTxnCounts(days int) *mgo.Iter {
	ret := _m.Called(days)

	var r0 *mgo.Iter
	if rf, ok := ret.Get(0).(func(int) *mgo.Iter); ok {
		r0 = rf(days)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgo.Iter)
		}
	}

	return r0
}

// IndexHead provides a mock function with given fields:
func (_m *Database) IndexHead() [1]uint64 {
	ret := _m.Called()

	var r0 [1]uint64
	if rf, ok := ret.Get(0).(func() [1]uint64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([1]uint64)
		}
	}

	return r0
}

// Init provides a mock function with given fields:
func (_m *Database) Init() {
	_m.Called()
}

// IsFirstRun provides a mock function with given fields:
func (_m *Database) IsFirstRun() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsInDB provides a mock function with given fields: height, hash
func (_m *Database) IsInDB(height uint64, hash string) (bool, bool) {
	ret := _m.Called(height, hash)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64, string) bool); ok {
		r0 = rf(height, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(uint64, string) bool); ok {
		r1 = rf(height, hash)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// IsPresent provides a mock function with given fields: height
func (_m *Database) IsPresent(height uint64) bool {
	ret := _m.Called(height)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Ping provides a mock function with given fields:
func (_m *Database) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Purge provides a mock function with given fields: height
func (_m *Database) Purge(height uint64) {
	_m.Called(height)
}

// SupplyObject provides a mock function with given fields: symbol
func (_m *Database) SupplyObject(symbol string) (models.Store, error) {
	ret := _m.Called(symbol)

	var r0 models.Store
	if rf, ok := ret.Get(0).(func(string) models.Store); ok {
		r0 = rf(symbol)
	} else {
		r0 = ret.Get(0).(models.Store)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStore provides a mock function with given fields: latestBlock, synctype
func (_m *Database) UpdateStore(latestBlock *models.Block, synctype string) error {
	ret := _m.Called(latestBlock, synctype)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Block, string) error); ok {
		r0 = rf(latestBlock, synctype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSupply provides a mock function with given fields: ticker, new
func (_m *Database) UpdateSupply(ticker string, new *models.Store) error {
	ret := _m.Called(ticker, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Store) error); ok {
		r0 = rf(ticker, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
